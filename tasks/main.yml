---
### User and group creation
- name: create Epic groups
  ansible.builtin.group:
    name: "{{ item['name'] }}"
    gid: "{{ item['gid'] }}"
    state: present
  loop:
    - {name: 'epicsys', gid: 10000}
    - {name: 'epicuser', gid: 10001}
    - {name: 'cachegrp', gid: 10002}
    - {name: 'dmngrp', gid: 10003}
    - {name: 'iscagent', gid: 10004}

- name: create Epic users
  ansible.builtin.user:
    createhome: true
    name: "{{ item['user'] }}"
    comment: "{{ item['comment'] }}"
    group: "{{ item['group'] }}"
    groups: "{{ item['groups'] }}"
    uid: "{{ item['uid'] }}"
    state: "{{ item['state'] }}"
    password: "{{ item['password'] }}"
  loop: "{{ epic_users }}"


### Install required packages
- name: Install packages for Red Hat distros
  when: ansible_facts['os_family'] == 'RedHat'
  block:
    - name: ensure packges needed for Epic and role are installed
      ansible.builtin.yum:
        name:
          - perl-core
          - perl-CGI
          - perl-XML-Simple
          - ksh
          - sysstat
          - psmisc
          - openssh-server
          - firewalld
          - policycoreutils-python
          - python36-cryptography
          - net-tools
          - lsscsi
          - virt-what
          - chrony
          - iperf3
          - patch
          - gcc
          - gdb
          - lsof
          - strace
          - tmux
          - perf
          - dstat
        state: present
      when: ansible_facts['distribution_major_version'] < '8'
      tags:
        - firewall

    - name: ensure packges needed for Epic and role are installed
      ansible.builtin.dnf:
        name:
          - perl
          - ksh
          - sysstat
          - psmisc
          - openssh-server
          - firewalld
          - net-tools
          - lsscsi
          - virt-what
          - chrony
          - iperf3
          - patch
          - python3-policycoreutils
          - python3-cryptography
          - gcc
          - gdb
          - lsof
          - strace
          - tmux
          - perf
          - pcp-system-tools
          - bcc-tools
          - epic-config
        state: present
      when: ansible_facts['distribution_major_version'] > '7'
      tags:
        - firewall

- name: Install packages for Red Hat distros
  when: ansible_facts['os_family'] == 'Debian'
  block:
    - name: ensure packages needed for Epic and role are installed
      ansible.builtin.apt:
        name:
          - perl
          - perl-doc
          - ksh
          - sysstat
          - psmisc
          - openssh-server
          - ufw
          - net-tools
          - lsscsi
          - virt-what
          - cron
          - chrony
          - rsync
          - iperf3
          - libaio1
          - patch
          - python3-cryptography
          - dstat
          - gcc
          - gdb
          - lsof
          - strace
          - tmux
          - linux-tools-common
          - bpftrace
          - htop
          - iftop
          - nmon
        state: present

### Post package install tasks
- name: gather package facts
  package_facts:

### systemd tweaks
- name: load service facts
  service_facts:

- block:
    - name: stop and disable tuned
      ansible.builtin.service:
        name: tuned
        state: stopped
        enabled: false
      when: ansible_facts['services']['tuned.service'] is defined

    ### Security limits and sysctl config options
    - name: configure security limits
      ansible.builtin.copy:
        src: limits
        dest: /etc/security/limits.d/99-epic.conf
        owner: root
        group: root
        mode: 0644

    - name: check and config sysctl
      include: sysctl.yml
      loop:
        - {name: vm.hugetlb_shm_group, value: 10000}
        - {name: vm.swappiness, value: 1}
        - {name: vm.dirty_expire_centisecs, value: 200}
        - {name: vm.dirty_writeback_centisecs, value: 50}
        - {name: kernel.pid_max, value: 4000000}
        - {name: kernel.shmmax, value: 2199023255552}
        - {name: kernel.msgmnb, value: 65536}
        - {name: kernel.core_pattern, value: /epic_core/%e.%h.%p.%t.dump}
        - {name: kernel.sem, value: 250 1024000000 500 32000}
        - {name: kernel.numa_balancing, value: 0}
        - {name: fs.file-max, value: 1000000000}
        - {name: fs.aio-max-nr, value: 524288}
        - {name: net.core.rmem_max, value: 33554432}
        - {name: net.core.wmem_max, value: 33554432}
        - {name: net.core.netdev_max_backlog, value: 300000}
        - {name: net.ipv4.tcp_rmem, value: 4096 87380 33554432}
        - {name: net.ipv4.tcp_wmem, value: 4096 65536 33554432}
        - {name: net.ipv4.tcp_keepalive_time, value: 600}
        - {name: net.ipv4.tcp_keepalive_intvl, value: 60}

    - name: configure hugepage size
      ansible.posix.sysctl:
        name: vm.nr_hugepages
        value: "{{ nr_hugepages }}"
        sysctl_file: /etc/sysctl.d/99-epic.conf
        sysctl_set: true
        state: present
      when: nr_hugepages is defined

    - name: disable alt+ctrl+del
      ansible.builtin.file:
        src: /dev/null
        dest: /etc/systemd/system/ctrl-alt-del.target
        state: link

    - name: add grub options
      ansible.builtin.copy:
        src: grub
        dest: /etc/default/grub
        owner: root
        group: root
        mode: 0644
      notify: grub-mkconfig
      when: "'grub' in ansible_facts['packages']"

    - name: copy Epic sudoers file
      ansible.builtin.copy:
        src: sudoers
        dest: /etc/sudoers.d/epic
        owner: root
        group: root
        mode: 0440

  when: ansible_facts['distribution_major_version'] < '8'

- block:
    - name: add grub options
      ansible.builtin.copy:
        src: grub
        dest: /etc/default/grub
        owner: root
        group: root
        mode: 0644
      notify: grub-mkconfig
      when: "'grub2-common' in ansible_facts['packages']"

    - name: configure tuned
      ansible.builtin.lineinfile:
        path: /etc/tuned/epic/tuned.conf
        line: vm.hugetlb_shm_group = 10000
        regexp: '^vm.hugetlb_shm_group'
        insertafter: '^[sysctl]$'
  when: ansible_facts['distribution_major_version'] >= '8'

- name: install service files
  ansible.builtin.copy:
    src: "{{ item }}.service"
    dest: /etc/systemd/system/{{ item }}.service
    owner: root
    group: root
    mode: 0664
  loop:
    - epic@
    - redalert

- name: make sure epic@.service is enabled
  ansible.builtin.systemd:
    name: epic@{{ item }}
    enabled: true
  loop: "{{ odb_instances }}"
  when: useepicatservice

- name: enable redalert.service
  ansible.builtin.systemd:
    name: redalert
    enabled: true

### Directory creation
- name: create /usr/local/epic
  ansible.builtin.file:
    path: /usr/local/epic
    state: directory
    owner: epicadm
    group: epicsys
    mode: 0755

- name: create Cache registration files directory
  ansible.builtin.file:
    path: /usr/local/etc/cachesys
    state: directory
    owner: root
    group: root
    mode: 0755

- name: create core dump directory
  ansible.builtin.file:
    path: /epic_core
    state: directory
    owner: epicadm
    group: cachegrp
    mode: 0777

- name: create epic directory
  ansible.builtin.file:
    path: /epic
    state: directory
    owner: epicadm
    group: epicsys
    mode: '2755'

- name: create /epic/tmp directory
  ansible.builtin.file:
    path: /epic/tmp
    state: directory
    owner: epicadm
    group: epicuser
    mode: '1777'

- name: create /epic/certs
  ansible.builtin.file:
    path: /epic/certs
    state: directory
    owner: epicadm
    group: epicsys
    mode: 0755

- name: ensure encryption keys directory exists
  ansible.builtin.file:
    path: /epic/certs/keys
    state: directory
    owner: epicadm
    group: epicsys
    mode: 0755

### Copy scripts and miscelaneous files
- name: check sslcert binary
  ansible.builtin.stat:
    path: /epic/redalert/bin/sslcert
  register: sslcert_bin_stat

- name: check RedAlert conf file
  ansible.builtin.stat:
    path: /epic/redalert/conf/epic.conf
  register: ra_conf_file_stat

- name: get ESMP_TRUSTED_DIR
  shell: set -o pipefail &
    grep '<ESMP_TRUSTED_DIR>' /epic/redalert/conf/epic.conf | cut -d '>' -f 2 | cut -d '<' -f 1
  register: esmp_trusted_dir
  check_mode: false
  changed_when: false
  when: ra_conf_file_stat['stat']['exists']

- name: get contents of ESMP_TRUSTED_DIR
  find:
    paths: "{{ esmp_trusted_dir['stdout'] }}"
    pattern: '*'
  register: esmp_trusted_dir_files
  when:
    - ra_conf_file_stat
    - esmp_trusted_dir['stdout'] | default('')

- name: check for CA bundle
  ansible.builtin.stat:
    path: files/{{ ca_bundle }}
  register: ca_bundle_stat
  changed_when: false
  check_mode: false

- name: copy CA certs
  ansible.builtin.copy:
    src: "{{ ca_bundle }}"
    dest: /epic/certs/CA.pem
    owner: epicadm
    group: epicsys
    mode: 0644
  notify:
    - Update RedAlert CAs
    - Clear RedAlert CAs
  when: ca_bundle_stat['stat']['exists']

- name: enable SSH on port 2222 in selinux
  community.general.seport:
    ports: 22, 2222
    proto: tcp
    setype: ssh_port_t
    state: present
  when: ansible_facts['selinux']['status'] == 'enabled'

- name: create /etc/ssh
  ansible.builtin.file:
    path: /etc/ssh
    state: directory
    owner: root
    group: root
    mode: 0755  # noqa risky-file-permissions

- name: disable root login over SSH
  ansible.builtin.lineinfile:
    line: PermitRootLogin no
    regexp: '^PermitRootLogin'
    path: /etc/ssh/sshd_config
  notify: restart_sshd

- name: explicily enable port 22
  ansible.builtin.lineinfile:
    line: Port 22
    regexp: '^Port 22$'
    path: /etc/ssh/sshd_config
  notify: restart_sshd

- name: set sshd to listen on port 2222
  ansible.builtin.lineinfile:
    line: Port 2222
    regexp: '^Port 2222'
    insertafter: '^Port 22$'
    path: /etc/ssh/sshd_config
  notify: restart_sshd

- name: set port 2222 to sftp only
  ansible.builtin.blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK SFTP Port"
    block: |
      Match LocalPort 2222
        ForceCommand /usr/libexec/openssh/sftp-server -d /epicfiles/
    path: /etc/ssh/sshd_config
  notify: restart_sshd

- name: set epic menus for groups
  ansible.builtin.blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK epicmenu for {{ item['group'] }}"
    block: |
      Match LocalPort 22 Group {{ item['group'] }}
        ForceCommand /epic/bin/{{ item['menu'] }}
    path: /etc/ssh/sshd_config
  notify: restart_sshd
  loop: "{{ epicmenu_groups }}"
  when: epicmenu_groups is defined

- name: set epic menus for users
  ansible.builtin.blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK epicmenu for {{ item['user'] }}"
    block: |
      Match LocalPort 22 User {{ item['user'] }}
        ForceCommand /epic/bin/{{ item['menu'] }}
    path: /etc/ssh/sshd_config
  notify: restart_sshd
  loop: "{{ epicmenu_users }}"
  when: epicmenu_users is defined

- name: copy /usr/local/bin files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /usr/local/bin/{{ item | basename }}
    owner: root
    group: root
    mode: 0755
  with_fileglob: localbin/*

- name: create manage_epicuser_group
  ansible.builtin.template:
    src: manage_epicuser_group.j2
    dest: /usr/local/bin/manage_epicuser_group
    owner: root
    group: root
    mode: 0775

- name: add cron job for manage_epicuser_group
  ansible.builtin.file:
    src: /usr/local/bin/manage_epicuser_group
    dest: /etc/cron.hourly/manage_epicuser_group
    state: link
  when: "'cronie' in ansible_facts['packages']"

- name: add audit lines to PAM files
  ansible.builtin.lineinfile:
    dest: "{{ item }}"
    state: present
    regexp: '^session\s+required\s+pam_tty_audit\.so'
    line: 'session required pam_tty_audit.so disable=* enable=root,epicadm'
  loop:
    - /etc/pam.d/system-auth
    - /etc/pam.d/password-auth
  notify:
    - restartauditd
  when: "'audit' in ansible_facts['packages']"

### Sudoers config
- name: create working copy of system sudoers file
  command: cp -f /etc/sudoers /etc/sudoers.tmp
  changed_when: false

- name: back up sudoers file
  command: cp -f /etc/sudoers /etc/sudoers.bak
  changed_when: false

- name: remove Defaults requiretty
  ansible.builtin.lineinfile:
    dest: /etc/sudoers.tmp
    state: absent
    regexp: 'Defaults    requiretty'

- name: check for sudoers differences
  command: diff /etc/sudoers.tmp /etc/sudoers
  register: sudoers_diff
  ignore_errors: true
  changed_when: false

- name: Check working copy of suders file, and replace active sudoers config
  shell: set -o pipefail |
    visudo -q -c -f /etc/sudoers.tmp &&
    cp -f /etc/sudoers.tmp /etc/sudoers
  register: sudoers_result
  changed_when: sudoers_result.rc == 0 and sudoers_diff.rc == 1

### Setup firewall rules
- name: refresh service facts
  service_facts:
  tags:
    - firewall

- name: start firewalld
  ansible.builtin.systemd:
    name: firewalld
    state: started
    enabled: true
  when:
    - ansible_env['container'] is not defined
    - ansible_facts['os_family'] != 'Debian'
  tags:
    - firewall

- name: ufw started
  ansible.builtin.systemd:
    name: ufw
    state: started
    enabled: true
  when:
    - ansible_env['container'] is not defined
    - ansible_facts['os_family'] == 'Debian'
  tags:
    - firewall

- name: Setup firewall rules
  include_tasks: firewall_rules.yml
  loop: "{{ odb_firewalld_services }}"
  loop_control:
    loop_var: firewall_service
  tags:
    - firewall

- name: refresh service facts
  service_facts:
  tags:
    - firewall

- name: reload firewalld
  command: firewall-cmd --reload
  changed_when: false
  when:
    - ansible_facts['services']['firewalld.service']['state'] == 'running'
    - ansible_facts['os_family'] != 'Debian'
  tags:
    - firewall

- name: enable dynamic Epic firewall rules
  ansible.posix.firewalld:
    service: "{{ item['name'] }}"
    permanent: true
    immediate: true
    state: enabled
  loop: "{{ odb_firewalld_services }}"
  when:
    - ansible_facts['services']['firewalld.service']['state'] == 'running'
    - ansible_facts['os_family'] != 'Debian'
  tags:
    - firewall

- name: Enable SFTP port on firewall
  ansible.posix.firewalld:
    port: 2222/tcp
    permanent: true
    state: enabled
  when:
    - ansible_facts['services']['firewalld.service']['state'] == 'running'
    - ansible_facts['os_family'] != 'Debian'
  tags:
    - firewall

### Get status of /etc/vmware-tools before trying to copy file there
- name: get status of /etc/vmware-tools directory
  ansible.builtin.stat:
    path: /etc/vmware-tools
  register: etc_vmwaretools
  changed_when: false
  check_mode: false

- name: copy tools.conf
  ansible.builtin.copy:
    src: tools.conf
    dest: /etc/vmware-tools/tools.conf
    owner: root
    group: root
    mode: 0644  # noqa risky-file-permissions
  when: etc_vmwaretools['stat']['exists']
  notify: restart_vmtools

- name: Generate private key
  community.crypto.openssl_privatekey:
    path: /epic/certs/keys/private.key
    owner: epicadm
    group: epicsys

- name: Generate CSR
  community.crypto.openssl_csr:
    path: /epic/certs/{{ ansible_hostname }}.csr
    privatekey_path: /epic/certs/keys/private.key
    common_name: '{{ ansible_fqdn }}'
    organizational_unit_name: "{{ epic_csr['ou'] }}"
    organization_name: "{{ epic_csr['o'] }}"
    locality_name: "{{ epic_csr['l'] }}"
    state_or_province_name: "{{ epic_csr['s'] }}"
    country_name: "{{ epic_csr['c'] }}"
    subject_alt_name: "{{ dnsnames | map('regex_replace', '^', 'DNS:') | list }}"

- name: check for chrony.conf
  ansible.builtin.stat:
    path: /etc/chrony.conf
  register: chrony_conf_stat
  changed_when: false
  check_mode: false

- name: update chrony config
  when: chrony_conf_stat['stat']['exists']
  block:
    - name: disable makestep
      ansible.builtin.lineinfile:
        path: /etc/chrony.conf
        regexp: 'makestep'
        line: '#makestep 2'
    - name: set minsources to 2
      ansible.builtin.lineinfile:
        path: /etc/chrony.conf
        regexp: '^minsources'
        line: 'minsources 2'
    - name: set logchange to 0.5
      ansible.builtin.lineinfile:
        path: /etc/chrony.conf
        regexp: '^logchange'
        line: 'logchange 0.5'

### epicmenu config
- name: create conf directory
  ansible.builtin.file:
    path: /epic/conf
    state: directory
    owner: epicadm
    group: epicuser
    mode: 0755
  tags:
    - epicmenu

- name: create bin directory
  ansible.builtin.file:
    path: /epic/bin
    state: directory
    owner: epicadm
    group: epicuser
    mode: 0755
  tags:
    - epicmenu

- name: install epicmenu confs
  ansible.builtin.template:
    src: templates/epicmenu/{{ item | basename }}
    dest: /epic/conf/{{ (item | basename | splitext)[0] }}
    owner: epicadm
    group: epicsys
    mode: 0644
    backup: true
  with_fileglob: templates/epicmenu/*
  tags:
    - epicmenu

- name: ensure links exists for epicmenus
  ansible.builtin.file:
    path: /epic/bin/{{ ((item | basename | splitext)[0] | splitext)[0] }}
    src: epicmenu
    state: link
    force: true
  when: ((item | basename | splitext)[0] | splitext)[0] != 'epicmenu'
  with_fileglob: templates/epicmenu/*
  tags:
    - epicmenu

- name: install environment epicmenus
  include_tasks: epicmenu.yml
  loop: "{{ epic_environments }}"
  loop_control:
    loop_var: EpicEnvironment
  tags:
    - epicmenu
