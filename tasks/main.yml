---
### User and group creation
- name: create Epic groups
  group:
    name: "{{ item['name'] }}"
    gid: "{{ item['gid'] }}"
    state: present
  loop:
    - {name: 'epicsys', gid: 10000}
    - {name: 'epicuser', gid: 10001}
    - {name: 'cachegrp', gid: 10002}
    - {name: 'dmngrp', gid: 10003}
    - {name: 'iscagent', gid: 10004}

- name: create Epic users
  user:
    createhome: true
    name: "{{ item['user'] }}"
    comment: "{{ item['comment'] }}"
    group: "{{ item['group'] }}"
    groups: "{{ item['groups'] }}"
    uid: "{{ item['uid'] }}"
    state: "{{ item['state'] }}"
    password: "{{ item['password'] }}"
  loop: "{{ epic_users }}"

### systemd tweaks
- name: load service facts
  service_facts:

- name: stop and disable tuned
  service:
    name: tuned
    state: stopped
    enabled: false
  when: ansible_facts['services']['tuned.service'] is defined

- name: install service files
  copy:
    src: "{{ item }}.service"
    dest: /etc/systemd/system/{{ item }}.service
    owner: root
    group: root
    mode: 0664
  loop:
    - epic
    - epic@
    - redalert

- name: make sure epic.service is enabled
  systemd:
    name: epic
    enabled: true
  when: not useepicatservice

- name: make sure epic@.service is enabled
  systemd:
    name: epic@{{ item }}
    enabled: true
  loop: "{{ CacheInstances }}"
  when: useepicatservice

- name: enable redalert.service
  systemd:
    name: redalert
    enabled: true

- name: disable alt+ctrl+del
  file:
    src: /dev/null
    dest: /etc/systemd/system/ctrl-alt-del.target
    state: link

### Security limits and sysctl config options
- name: configure security limits
  copy:
    src: limits
    dest: /etc/security/limits.d/99-epic.conf
    owner: root
    group: root
    mode: 0644

- name: configure sysctl
  sysctl:
    name: "{{ item['name'] }}"
    value: "{{ item['value'] }}"
    sysctl_file: /etc/sysctl.d/99-epic.conf
    sysctl_set: true
    state: present
    reload: true
  with_items:
    - {name: vm.hugetlb_shm_group, value: 10000}
    - {name: vm.swappiness, value: 1}
    - {name: vm.dirty_expire_centisecs, value: 200}
    - {name: vm.dirty_writeback_centisecs, value: 50}
    - {name: kernel.pid_max, value: 4000000}
    - {name: kernel.shmmax, value: 2199023255552}
    - {name: kernel.msgmnb, value: 65536}
    - {name: kernel.core_pattern, value: /epic_core/%e.%h.%p.%t.dump}
    - {name: kernel.sem, value: 250 1024000000 500 32000}
    - {name: kernel.numa_balancing, value: 0}
    - {name: fs.file-max, value: 1000000000}
    - {name: fs.aio-max-nr, value: 524288}
    - {name: net.core.rmem_max, value: 33554432}
    - {name: net.core.wmem_max, value: 33554432}
    - {name: net.core.netdev_max_backlog, value: 300000}
    - {name: net.ipv4.tcp_rmem, value: 4096 87380 33554432}
    - {name: net.ipv4.tcp_wmem, value: 4096 65536 33554432}
    - {name: net.ipv4.tcp_keepalive_time, value: 600}
    - {name: net.ipv4.tcp_keepalive_intvl, value: 60}

- name: configure hugepage size
  sysctl:
    name: vm.nr_hugepages
    value: "{{ nr_hugepages }}"
    sysctl_file: /etc/sysctl.d/99-epic.conf
    sysctl_set: true
    state: present
  when: nr_hugepages is defined

### Install required packages
- name: ensure packges needed for Epic and role are installed
  yum:
    name:
      - perl-core
      - perl-CGI
      - perl-XML-Simple
      - ksh
      - sysstat
      - psmisc
      - cifs-utils
      - openssh-server
      - firewalld
    state: present

### Post package install tasks
- name: gather package facts
  package_facts:

- name: add grub options
  copy:
    src: grub
    dest: /etc/default/grub
    owner: root
    group: root
    mode: 0644
  notify: grub-mkconfig
  when: "'grub' in ansible_facts['packages']"

### Directory creation
- name: create Cache registration files directory
  file:
    path: /usr/local/etc/cachesys
    state: directory
    owner: root
    group: root
    mode: 0755

- name: create core dump directory
  file:
    path: /epic_core
    state: directory
    owner: epicadm
    group: cachegrp
    mode: 0777

- name: create epic directory
  file:
    path: /epic
    state: directory
    owner: epicadm
    group: epicsys
    mode: '2755'

- name: create /epic/certs
  file:
    path: /epic/certs
    state: directory
    owner: epicadm
    group: cachegrp
    mode: 0770

- name: ensure encryption keys directory exists
  file:
    path: /epic/certs/keys
    state: directory
    owner: epicadm
    group: epicsys
    mode: 0770

### Copy scripts and miscelaneous files
- name: copy CA certs
  copy:
    src: CA.pem
    dest: /epic/certs/CA.pem
    owner: root
    group: root
    mode: 0664

- name: create /etc/ssh
  file:
    path: /etc/ssh
    state: directory

- name: set sshd to listen on port 2222
  lineinfile:
    line: Port 2222
    regexp: '^Port 2222'
    insertafter: '^Port 22$'
    path: /etc/ssh/sshd_config
  notify: restart_sshd

- name: set port 2222 to sftp only
  blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK SFTP Port"
    block: |
      Match LocalPort 2222
        ForceCommand /usr/libexec/openssh/sftp-server -d /epicfiles/
    path: /etc/ssh/sshd_config
  notify: restart_sshd

- name: set epic menus for groups
  blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK epicmenu for {{ item['group'] }}"
    block: |
      Match LocalPort 22 Group {{ item['group'] }}
        ForceCommand /epic/bin/{{ item['menu'] }}
    path: /etc/ssh/sshd_config
  notify: restart_sshd
  loop: "{{ epicmenu_groups }}"
  when: epicmenu_groups is defined

- name: set epic menus for users
  blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK epicmenu for {{ item['user'] }}"
    block: |
      Match LocalPort 22 User {{ item['user'] }}
        ForceCommand /epic/bin/{{ item['menu'] }}
    path: /etc/ssh/sshd_config
  notify: restart_sshd
  loop: "{{ epicmenu_users }}"
  when: epicmenu_users is defined

- name: copy /usr/local/bin files
  copy:
    src: "{{ item }}"
    dest: /usr/local/bin/{{ item | basename }}
    owner: root
    group: root
    mode: 0755
  with_fileglob: localbin/*

- name: create manage_epicuser_group
  template:
    src: manage_epicuser_group.j2
    dest: /usr/local/bin/manage_epicuser_group
    owner: root
    group: root
    mode: 0775

- name: add cron job for manage_epicuser_group
  file:
    src: /usr/local/bin/manage_epicuser_group
    dest: /etc/cron.hourly/manage_epicuser_group
    state: link
  when: "'cronie' in ansible_facts['packages']"

- name: add audit lines to PAM files
  lineinfile:
    dest: "{{ item }}"
    state: present
    regexp: '^session\s+required\s+pam_tty_audit\.so'
    line: 'session required pam_tty_audit.so disable=* enable=root,epicadm'
  loop:
    - /etc/pam.d/system-auth
    - /etc/pam.d/password-auth
  notify:
    - restartauditd
  when: "'audit' in ansible_facts['packages']"

### Sudoers config
- name: copy Epic sudoers file
  copy:
    src: sudoers
    dest: /etc/sudoers.d/epic
    owner: root
    group: root
    mode: 0440

- name: create working copy of system sudoers file
  command: cp -f /etc/sudoers /etc/sudoers.tmp
  changed_when: false

- name: back up sudoers file
  command: cp -f /etc/sudoers /etc/sudoers.bak
  changed_when: false

- name: remove Defaults requiretty
  lineinfile:
    dest: /etc/sudoers.tmp
    state: absent
    regexp: 'Defaults    requiretty'

- name: check for sudoers differences
  command: diff /etc/sudoers.tmp /etc/sudoers
  register: sudoers_diff
  ignore_errors: true
  changed_when: false

- name: Check working copy of suders file, and replace active sudoers config
  shell: set -o pipefail |
    visudo -q -c -f /etc/sudoers.tmp &&
    cp -f /etc/sudoers.tmp /etc/sudoers
  register: sudoers_result
  changed_when: sudoers_result.rc == 0 and sudoers_diff.rc == 1

### Setup firewall rules
- name: refresh service facts
  service_facts:

- name: start firewalld
  systemd:
    name: firewalld
    state: started
    enabled: true
  when: ansible_env['container'] is not defined

- name: Setup firewall rules
  include_tasks: firewall_rules.yml
  loop: "{{ odb_firewalld_services }}"

- name: refresh service facts
  service_facts:

- name: reload firewalld
  command: firewall-cmd --reload
  changed_when: false
  when: ansible_facts['services']['firewalld.service']['state'] == 'running'

- name: enable dynamic Epic firewall rules
  firewalld:
    service: "{{ item['name'] }}"
    permanent: true
    immediate: true
    state: enabled
  loop: "{{ odb_firewalld_services }}"
  when: ansible_facts['services']['firewalld.service']['state'] == 'running'

- name: Enable SFTP port on firewall
  firewalld:
    port: 2222/tcp
    permanent: true
    state: enabled
  when: ansible_facts['services']['firewalld.service']['state'] == 'running'

### Verify /epic is mounted before copying scripts to /epic/bin
- name: get status of /epic/bin directory
  stat:
    path: /epic/bin
  register: epic_bin

- name: copy start_epic_all.ksh script
  template:
    src: start_epic_all.ksh.j2
    dest: /epic/bin/start_epic_all.ksh
    owner: epicadm
    group: epicsys
    mode: 0744
  when:
    - epic_bin['stat']['exists']

- name: copy stop_epic_all.ksh script
  copy:
    src: stop_epic_all.ksh
    dest: /epic/bin/stop_epic_all.ksh
    owner: epicadm
    group: epicsys
    mode: 0744
  when: epic_bin['stat']['exists']
